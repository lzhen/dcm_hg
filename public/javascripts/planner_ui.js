//BEGIN RS MODIFICATIONS 6-24-2010//we need a hash linking the id of each proficiency to the ids of the courses it should highlightvar lockedCompletedCourses = [];var lockedInstances = [];var myProficienciesId = [];var selectedPotentialCourse = null;var proficiencyNameToId ={    "algebra":  						["82","83","84","85"],			    "calculus":							["86","87","88","89"],    "collaborativeprinciples": 			["154","155","156","157"],    "communicationandnetworks": 		["210","211","212","213"],	    "computationalmediaanalysis": 		["206","207","208","209"],    "computationaltools":				["166","167","168","169"],	    "culturalpracticeandstudies":		["202","203","204","205"],	    "digitalarchivingandpublishing":	["170","171","172", "173"],	    "editingandprocessing":				["78","79","80","81"],		    "embodimentandkinesthetics":		["214","215","216","217"],	    "fabricationandbuilding":			["182","183","184","185"],		"formandcomposition":				["70", "71", "72","73"],		"historyandtheory":					["198","199","200","201"],		"improvisationanditerativedesign":	["186","187","188","189"],	 	"mediainphysicalspace":				["190", "191","192","193"], 	"modelingandinference":				["106","107","108","109"],					 	"narrativeconstruction":			["66", "67","68","69"],	    "perceptionandcognition":			["138", "139","140","141"],	    "performanceandinteraction":		["174","175","176", "177"],						    "projectdesignandproduction":		["130","131","132","133"],				    "reflectivepractices":				["194","195","196", "197"],				     "researchmethodologyandwriting":	["222","223","224","225"],				 	"routineactivityanddecisionmaking":	["110", "111","112","113"],					"sensorsandsignals":				["118", "119","120","121"],				  	"socialmechanismsandunderstanding":	["134","135","136","137"],					 	"systemdesigndevelopment":			["126","127","128","129"],			"visualizationandsonification":		["98","99","100","101"],					};  var proficiencyNameToIdLevel ={    "algebra":  						[ {"id": 82,  				"level": 100 },   										  {"id": 83,  				"level": 200 },    									  {"id": 84,  				"level": 300 },    									  {"id": 85,  				"level": 400 }],			    "calculus":							[ {"id": 86,  				"level": 100 },   										  {"id": 87,  				"level": 200 },    									  {"id": 88,  				"level": 300 },    									  {"id": 89,  				"level": 400 }],     "collaborativeprinciples": 			[ {"id": 154,  				"level": 100 },   										  {"id": 155,  				"level": 200 },    									  {"id": 156,  				"level": 300 },    									  {"id": 157,  				"level": 400 }],	    "communicationandnetworks": 		[ {"id": 210,  				"level": 100 },   										  {"id": 211,  				"level": 200 },    									  {"id": 212,  				"level": 300 },    									  {"id": 213,  				"level": 400 }],	    "computationalmediaanalysis": 		[ {"id": 206,  				"level": 100 },   										  {"id": 207,  				"level": 200 },    									  {"id": 208,  				"level": 300 },    									  {"id": 209,  				"level": 400 }],    "computationaltools":				[ {"id": 166,  				"level": 100 },   										  {"id": 167,  				"level": 200 },    									  {"id": 168,  				"level": 300 },    									  {"id": 169,  				"level": 400 }],	    "culturalpracticeandstudies":		[ {"id": 202,  				"level": 100 },   										  {"id": 203,  				"level": 200 },    									  {"id": 204,  				"level": 300 },    									  {"id": 205,  				"level": 400 }],	    "digitalarchivingandpublishing":	[ {"id": 170,  				"level": 100 },   										  {"id": 171,  				"level": 200 },    									  {"id": 172,  				"level": 300 },    									  {"id": 173,  				"level": 400 }],	    "editingandprocessing":				[ {"id": 78,  				"level": 100 },   										  {"id": 79,  				"level": 200 },    									  {"id": 80,  				"level": 300 },    									  {"id": 81,  				"level": 400 }],		    "embodimentandkinesthetics":		[ {"id": 214,  				"level": 100 },   										  {"id": 215,  				"level": 200 },    									  {"id": 216,  				"level": 300 },    									  {"id": 217,  				"level": 400 }],	    "fabricationandbuilding":			[ {"id": 182,  				"level": 100 },   										  {"id": 183,  				"level": 200 },    									  {"id": 184,  				"level": 300 },    									  {"id": 185,  				"level": 400 }],		"formandcomposition":				[ {"id": 70,  				"level": 100 },   										  {"id": 71,  				"level": 200 },    									  {"id": 72,  				"level": 300 },    									  {"id": 73,  				"level": 400 }],		"historyandtheory":					[ {"id": 198,  				"level": 100 },   										  {"id": 199,  				"level": 200 },    									  {"id": 200,  				"level": 300 },    									  {"id": 201,  				"level": 400 }],		"improvisationanditerativedesign":	[ {"id": 186,  				"level": 100 },   										  {"id": 187,  				"level": 200 },    									  {"id": 188,  				"level": 300 },    									  {"id": 189,  				"level": 400 }],	 	"mediainphysicalspace":				[ {"id": 190,  				"level": 100 },   										  {"id": 191,  				"level": 200 },    									  {"id": 192,  				"level": 300 },    									  {"id": 193,  				"level": 400 }], 	"modelingandinference":				[ {"id": 106,  				"level": 100 },   										  {"id": 107,  				"level": 200 },    									  {"id": 108,  				"level": 300 },    									  {"id": 109,  				"level": 400 }],					 	"narrativeconstruction":			[ {"id": 66,  				"level": 100 },   										  {"id": 67,  				"level": 200 },    									  {"id": 68,  				"level": 300 },    									  {"id": 69,  				"level": 400 }],	    "perceptionandcognition":			[ {"id": 138,  				"level": 100 },   										  {"id": 139,  				"level": 200 },    									  {"id": 140,  				"level": 300 },    									  {"id": 141,  				"level": 400 }],	    "performanceandinteraction":		[ {"id": 174,  				"level": 100 },   										  {"id": 175,  				"level": 200 },    									  {"id": 176,  				"level": 300 },    									  {"id": 177,  				"level": 400 }],						    "projectdesignandproduction":		[ {"id": 130,  				"level": 100 },   										  {"id": 131,  				"level": 200 },    									  {"id": 132,  				"level": 300 },    									  {"id": 133,  				"level": 400 }],				    "reflectivepractices":				[ {"id": 194,  				"level": 100 },   										  {"id": 195,  				"level": 200 },    									  {"id": 196,  				"level": 300 },    									  {"id": 197,  				"level": 400 }],				     "researchmethodologyandwriting":	[ {"id": 222,  				"level": 100 },   										  {"id": 223,  				"level": 200 },    									  {"id": 224,  				"level": 300 },    									  {"id": 225,  				"level": 400 }],				 	"routineactivityanddecisionmaking":	[ {"id": 110,  				"level": 100 },   										  {"id": 111,  				"level": 200 },    									  {"id": 112,  				"level": 300 },    									  {"id": 113,  				"level": 400 }],					"sensorsandsignals":				[ {"id": 118,  				"level": 100 },   										  {"id": 119,  				"level": 200 },    									  {"id": 120,  				"level": 300 },    									  {"id": 121,  				"level": 400 }],				  	"socialmechanismsandunderstanding":	[ {"id": 134,  				"level": 100 },   										  {"id": 135,  				"level": 200 },    									  {"id": 136,  				"level": 300 },    									  {"id": 137,  				"level": 400 }],					 	"systemdesigndevelopment":			[ {"id": 126,  				"level": 100 },   										  {"id": 127,  				"level": 200 },    									  {"id": 128,  				"level": 300 },    									  {"id": 129,  				"level": 400 }],			"visualizationandsonification":		[ {"id": 98,  				"level": 100 },   										  {"id": 99,  				"level": 200 },    									  {"id": 100,  				"level": 300 },    									  {"id": 101,  				"level": 400 }],					};  var semesterId2 = 0;var firstSemester = 7 ;var DATA_URL = "http://127.0.0.1:3000";// initialize the semesters of  owned courses in the instanceInfo.semesterInfovar a = 0;$(document).ready(function() {  $(function(){	$("li").find("ul").prev().click(function(){		$(this).next().toggle(500);		$(this).find('.rollButton').toggle();		return false;	});   });	  $(function () {   	  var currentScrollTop = 0;   	  var currentScrollBottom = 0;  	  	  $(window).scroll(function(){     	  currentScrollTop = $(window).scrollTop();    	  currentScrollBottom = $(document).height() - $(window).height() - $(window).scrollTop();    	  if (currentScrollTop >=380){      		 $(".leftDiv").addClass("fixedTop");     	  }else {			 $(".leftDiv").removeClass("fixedTop");     	  }		  if (currentScrollBottom < 50){		  	 $(".leftDiv").addClass("fixedBottom");		  	  $(".leftDiv").removeClass("fixedTop");		  }else{		  	 $(".leftDiv").removeClass("fixedBottom"); 		  }      	});     	   });  $(function(){	$(".followingsemester").hide();  });  $.getJSON(DATA_URL +'/instances.json', function(data) {  // retrieve course id and semester id	  		 $.getJSON(DATA_URL +'/courses.json', function(dataCourses) {  // retrieve course information		  			$.getJSON(DATA_URL +'/user_courses.json', function(dataUserCourses) {		    		    	$.getJSON(DATA_URL +'/proficiencies.json', function(dataProficiencies) {		    			    		$.getJSON(DATA_URL +'/course_proficiencies.json', function(dataCoursesProficiencies) {		    				    			$.getJSON(DATA_URL +'/paths.json', function(dataPaths) {		    					    				$.getJSON(DATA_URL +'/path_instances.json', function(dataPathInstances) {		    						    				  $.getJSON(DATA_URL +'/add_user_path.json', function(dataUserPath) {		    														  										var userId = dataUserPath.path.student_id;										var path = dataUserPath.path.id;									  										  // build the pre-selected course list firstly										  for (var i=0; i<dataCourses.length; i++) {											 var myPrefix = dataCourses[i].course.prefix;											 var myNumber = dataCourses[i].course.number;											 var myTitle = dataCourses[i].course.title;											 var myCourseId = dataCourses[i].course.id;											 $("#mycourse ul li ul").append("<li>" + "<a href='#' class='mycoursesquare' id='" + myCourseId + "' >" +"<strong>" + myPrefix + "&nbsp;" + myNumber + "</strong>"+"<br/>"+ myTitle +"</a>" + "</li>" );										  }										  										  $("#mycourse").append("<button id='confirm' class='button green'>" + "Update Completed Courses" + "</button>" );										  $("#mycourse").append("<button id='redo' class='button green'>" + "Edit Completed Courses" + "</button>" );										  $("#course").append("<button id='save' class='button2 green'>" + "Save The Path" + "</button>" );										  $("#course").append("<button id='clear' class='button2 green'>" + "Clear The Path" + "</button>" );										  $("#redo").hide();										  $("#save").hide();										  $("#clear").hide();																		  // add all my complete courses if click Update Completed Courses button										  // choose the courses I have completed										  $(".mycoursesquare").click(function (event){												var myId2 = event.currentTarget.id;												var indexOfId2 = $.inArray(myId2,lockedCompletedCourses);																								if(indexOfId2 == -1) { 													// add courses													lockedCompletedCourses.push(myId2);													$(event.currentTarget).addClass("pinnedMyCourseBorder");												}else{													// delete courses													lockedCompletedCourses.splice(indexOfId2,1);													$(event.currentTarget).removeClass("pinnedMyCourseBorder");												}																								// post data to user_courses table		 												$.ajax({													url: "/add_completed.json?courseId=" + myId2,													type: "GET"												});																								return false;											  });										  										  // click the "update completed courses" button to trigger the planner 										  $("#confirm").click(function(event){												// show/hide the items												$(".followingsemester").show();												$("#mycourse ul li ul li").remove();												$("#confirm").hide();												$("#redo").show();												$("#save").show();												$("#clear").show();																								 // start calcuation												 // semester-based courses												 for (var j=0; j<data.length; j++) {													var semester = data[j].instance.semester_id													var course = data[j].instance.course_id													var instance = data[j].instance.id																		if (semester == firstSemester) {															var userHasTaken = false;															for (var courseCode in lockedCompletedCourses) {																var completedCourse = lockedCompletedCourses[courseCode];																if (completedCourse == course)  {																	userHasTaken = true;																	break;																}																}																														//filtered courses															if (!userHasTaken) {																for (var i=0; i<dataCourses.length; i++) {																	 var prefix = dataCourses[i].course.prefix // Get the prefix of courses, for example "AME"																	 var number = dataCourses[i].course.number   // Get the number of courses, for example "294"																	 var title = dataCourses[i].course.title  // Get the title of courses, for example "Introduction to Digital Culture"																	 var courseId = dataCourses[i].course.id  // Get the courseId of courses, for example "82"																																																																				 if (course == courseId && course != 110) {  // if course id in semester table matches the id of courses in course table																																if (number < 220) { // if course number is less than 200 																				$("#2011spring li ul").append("<li>" + "<a href='#' id='" + instance + "' class='cantakenCourse square'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			} else {																				$("#2011spring li ul").append("<li class='noDisplay'>" + "<a href='#' id='" + instance + "' class='square'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			}																	 }																																		 															}														}													};														if (semester == firstSemester+2) {															var userHasTaken = false;															for (var courseCode in lockedCompletedCourses) {																var completedCourse = lockedCompletedCourses[courseCode];																if (completedCourse == course)  {																	userHasTaken = true;																	break;																}																}															if (!userHasTaken) {																for (var i=0; i<dataCourses.length; i++) {																	 var prefix = dataCourses[i].course.prefix // Get the prefix of courses, for example "AME"																	 var number = dataCourses[i].course.number   // Get the number of courses, for example "294"																	 var title = dataCourses[i].course.title  // Get the title of courses, for example "Introduction to Digital Culture"																	 var courseId = dataCourses[i].course.id  // Get the courseId of courses, for example "82"																																		 if (course == courseId && course != 110) {  // if course id in semester table matches the id of courses in course table																																																				if (number < 220) { // if course number is less than 200 																				$("#2011fall li ul").append("<li>" + "<a href='#' id='" + instance + "' class='cantakenCourse square cantakenCourseNoBorder'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			} else {																				$("#2011fall li ul").append("<li class='noDisplay'>" + "<a href='#' id='" + instance + "' class='square'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			}																	 }																	 																}															}													};													if (semester == firstSemester+4) {															var userHasTaken = false;															for (var courseCode in lockedCompletedCourses) {																var completedCourse = lockedCompletedCourses[courseCode];																if (completedCourse == course)  {																	userHasTaken = true;																	break;																}																}															if (!userHasTaken) {																for (var i=0; i<dataCourses.length; i++) {																	 var prefix = dataCourses[i].course.prefix // Get the prefix of courses, for example "AME"																	 var number = dataCourses[i].course.number   // Get the number of courses, for example "294"																	 var title = dataCourses[i].course.title  // Get the title of courses, for example "Introduction to Digital Culture"																	 var courseId = dataCourses[i].course.id  // Get the courseId of courses, for example "82"																	 if (course == courseId && course != 110) {  // if course id in semester table matches the id of courses in course table																																																				if (number < 220 ) { // if course number is less than 200 																				$("#2012spring li ul").append("<li>" + "<a href='#' id='" + instance + "' class='cantakenCourse square cantakenCourseNoBorder'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			} else {																				$("#2012spring li ul").append("<li class='noDisplay'>" + "<a href='#' id='" + instance + "' class='square'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			}																	 }																																		 														}															}																		};														if (semester == firstSemester+6) {															var userHasTaken = false;															for (var courseCode in lockedCompletedCourses) {																var completedCourse = lockedCompletedCourses[courseCode];																if (completedCourse == course)  {																	userHasTaken = true;																	break;																}																}															if (!userHasTaken) {																for (var i=0; i<dataCourses.length; i++) {																	 var prefix = dataCourses[i].course.prefix // Get the prefix of courses, for example "AME"																	 var number = dataCourses[i].course.number   // Get the number of courses, for example "294"																	 var title = dataCourses[i].course.title  // Get the title of courses, for example "Introduction to Digital Culture"																	 var courseId = dataCourses[i].course.id  // Get the courseId of courses, for example "82"																																		 if (course == courseId && course != 110) {  // if course id in semester table matches the id of courses in course table																																																				if (number < 220) { // if course number is less than 200 																				$("#2012fall li ul").append("<li>" + "<a href='#' id='" + instance + "' class='cantakenCourse square cantakenCourseNoBorder'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			} else {																				$("#2012fall li ul").append("<li class='noDisplay'>" + "<a href='#' id='" + instance + "' class='square'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			}																	 }																																		 														}															}													};													if (semester == firstSemester+8) {															var userHasTaken = false;															for (var courseCode in lockedCompletedCourses) {																var completedCourse = lockedCompletedCourses[courseCode];																if (completedCourse == course)  {																	userHasTaken = true;																	break;																}																}																														if (!userHasTaken) {																for (var i=0; i<dataCourses.length; i++) {																	 var prefix = dataCourses[i].course.prefix // Get the prefix of courses, for example "AME"																	 var number = dataCourses[i].course.number   // Get the number of courses, for example "294"																	 var title = dataCourses[i].course.title  // Get the title of courses, for example "Introduction to Digital Culture"																	 var courseId = dataCourses[i].course.id  // Get the courseId of courses, for example "82"																																		 if (course == courseId && course != 110)  {  // if course id in semester table matches the id of courses in course table																																																				if (number < 220) { // if course number is less than 200 																				$("#2013spring li ul").append("<li>" + "<a href='#' id='" + instance + "' class='cantakenCourse square cantakenCourseNoBorder'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			} else {																				$("#2013spring li ul ").append("<li class='noDisplay'>" + "<a href='#' id='" + instance + "' class='square'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			}																	 }																																		 														}															}													};													if (semester == firstSemester+10) {															var userHasTaken = false;															for (var courseCode in lockedCompletedCourses) {																var completedCourse = lockedCompletedCourses[courseCode];																if (completedCourse == course)  {																	userHasTaken = true;																	break;																}																}																														if (!userHasTaken) {																for (var i=0; i<dataCourses.length; i++) {																	 var prefix = dataCourses[i].course.prefix // Get the prefix of courses, for example "AME"																	 var number = dataCourses[i].course.number   // Get the number of courses, for example "294"																	 var title = dataCourses[i].course.title  // Get the title of courses, for example "Introduction to Digital Culture"																	 var courseId = dataCourses[i].course.id  // Get the courseId of courses, for example "82"																																		 if (course == courseId) {  // if course id in semester table matches the id of courses in course table																																																				if (number < 220) { // if course number is less than 200 																				$("#2013fall li ul").append("<li>" + "<a href='#' id='" + instance + "' class='cantakenCourse square cantakenCourseNoBorder'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			} else {																				$("#2013fall li ul").append("<li class='noDisplay'>" + "<a href='#' id='" + instance + "' class='square'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			}																	 }																																		 														}															}													};													if (semester == firstSemester+12) {															var userHasTaken = false;															for (var courseCode in lockedCompletedCourses) {																var completedCourse = lockedCompletedCourses[courseCode];																if (completedCourse == course)  {																	userHasTaken = true;																	break;																}																}																														if (!userHasTaken) {																for (var i=0; i<dataCourses.length; i++) {																	 var prefix = dataCourses[i].course.prefix // Get the prefix of courses, for example "AME"																	 var number = dataCourses[i].course.number   // Get the number of courses, for example "294"																	 var title = dataCourses[i].course.title  // Get the title of courses, for example "Introduction to Digital Culture"																	 var courseId = dataCourses[i].course.id  // Get the courseId of courses, for example "82"																																		 if (course == courseId) {  // if course id in semester table matches the id of courses in course table																																																				if (number < 220) { // if course number is less than 200 																				$("#2014spring li ul").append("<li>" + "<a href='#' id='" + instance + "' class='cantakenCourse square cantakenCourseNoBorder'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			} else {																				$("#2014spring li ul").append("<li class='noDisplay'>" + "<a href='#' id='" + instance + "' class='square'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			}																	 }																																		 														}															}													};													if (semester == firstSemester+14) {															var userHasTaken = false;															for (var courseCode in lockedCompletedCourses) {																var completedCourse = lockedCompletedCourses[courseCode];																if (completedCourse == course)  {																	userHasTaken = true;																	break;																}																}																														if (!userHasTaken) {																for (var i=0; i<dataCourses.length; i++) {																	 var prefix = dataCourses[i].course.prefix // Get the prefix of courses, for example "AME"																	 var number = dataCourses[i].course.number   // Get the number of courses, for example "294"																	 var title = dataCourses[i].course.title  // Get the title of courses, for example "Introduction to Digital Culture"																	 var courseId = dataCourses[i].course.id  // Get the courseId of courses, for example "82"																																		 if (course == courseId) {  // if course id in semester table matches the id of courses in course table																																																				if (number < 220) { // if course number is less than 200 																				$("#2014fall li ul").append("<li>" + "<a href='#' id='" + instance + "' class='cantakenCourse square cantakenCourseNoBorder'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			} else {																				$("#2014fall li ul").append("<li class='noDisplay'>" + "<a href='#' id='" + instance + "' class='square'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			}																	 }																																		 														}															}													};														};																				 // show my courses												 for(var j=0; j<lockedCompletedCourses.length; j++){													var myCompleteCourse = lockedCompletedCourses[j];													for (var i=0; i<dataCourses.length; i++) {														var myCourseId = dataCourses[i].course.id;														if(myCourseId == myCompleteCourse){															 var myPrefix = dataCourses[i].course.prefix;															 var myNumber = dataCourses[i].course.number;															 var myTitle = dataCourses[i].course.title;															  $("#mycourse ul li ul").append("<li>" + "<a href='#' class='mycoursesquare' id='" + myCourseId +"' >" +"<strong>" + myPrefix + "&nbsp;" + myNumber + "</strong>"+"<br/>"+ myTitle +"</a>" + "</li>" );															  $("#redo").show();														}													}												 }												 												 // my proficiencies												 for(var p=0; p<lockedCompletedCourses.length; p++){																									var myCourse = lockedCompletedCourses[p];																									for (var q=0; q<dataCoursesProficiencies.length; q++) {														var courseId = dataCoursesProficiencies[q].course_proficiency.course_id;														var proficiencyDirection = dataCoursesProficiencies[q].course_proficiency.proficiency_direction;														var proficiencyId = dataCoursesProficiencies[q].course_proficiency.proficiency_id;																												if(courseId == myCourse){																														// present in the proficiency list															$.each(proficiencyNameToIdLevel,function(key,value){																for(var p=0; p< value.length; p++){																	 var proficiencyId2 = value[p].id;																	 var proficiencyLevel = value[p].level;																	 if (proficiencyId == proficiencyId2) {																		 $("#" + key + ">div").addClass("ownedproficiency");																		 $("#" + key + ">div").addClass("level"+ proficiencyLevel);																	 }																 }															});																														// add to myProficienciesId list															myProficienciesId = myProficienciesId.concat(proficiencyId);														}													}												}																								 // sort array and unique them (sort array for the easy-to-distinguish purpose)												 function sortNumber(a,b) {													return a-b;												};										 												 var myProficienciesIdSorted = myProficienciesId.sort(sortNumber);										 												 for(var i = 1; i < myProficienciesIdSorted.length; i++) {													if (myProficienciesIdSorted[i] == myProficienciesIdSorted[i-1]) {														myProficienciesIdSorted.splice(i, 1);														i--;													}												 }																						 // hover over the proficiency list to highlight potential courses												 $("#proficiency_list a").hover(													  function(event) { //mouseOver														  var myId = event.currentTarget.id; 														  var highlightedId = proficiencyNameToId[myId]; 														 																														for (var courseCode in highlightedId) {																	var proficiencyId = highlightedId[courseCode];																	for (var courseCode in dataCoursesProficiencies) {																		var proficiencyId2 = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_id; 																		var proficiencyDirection = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_direction;																		if(proficiencyId == proficiencyId2 && proficiencyDirection == "Outgoing") {																			var courseId = dataCoursesProficiencies[courseCode].course_proficiency.course_id;																			for(var courseCode in data) {																				var instance = data[courseCode].instance.id;																				var courseId2 = data[courseCode].instance.course_id;																				if(courseId == courseId2) {																					if($("#" + instance).hasClass("mycoursesquare")){																																											}else{																					$("#" + instance).addClass("highlightIncoming");																					}																				}																			}																		}																	}																}														 },													  function(event) { //mouseOver														  var myId = event.currentTarget.id; 														  var highlightedId = proficiencyNameToId[myId];  																for (var courseCode in highlightedId) {																	var proficiencyId = highlightedId[courseCode];																			for (var courseCode in dataCoursesProficiencies) {																				var proficiencyId2 = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_id; 																				var proficiencyDirection = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_direction;																				if(proficiencyId == proficiencyId2 && proficiencyDirection == "Outgoing") {																					var courseId = dataCoursesProficiencies[courseCode].course_proficiency.course_id;																					for(var courseCode in data) {																						var instance = data[courseCode].instance.id;																						var courseId2 = data[courseCode].instance.course_id;																						if(courseId == courseId2) {																							$("#" + instance).removeClass("highlightIncoming");																						}																					}																				}																			}																}														 }												  );										  												  // get all course ids												  var coursesId = [];												  for(var dataCourseProficiency in dataCoursesProficiencies) {													 var courseId = dataCoursesProficiencies[dataCourseProficiency].course_proficiency.course_id;													 coursesId = coursesId.concat(courseId);												  };																						  function sortNumber(a,b) {													return a-b;												  };												  												  var coursesIdSorted = coursesId.sort(sortNumber);												  for(var i = 1; i < coursesIdSorted.length; i++) {														if (coursesIdSorted[i] == coursesIdSorted[i-1]) {															coursesIdSorted.splice(i, 1);															i--;														}												  }																	  // distinguish all courses with colors												  var yellow = [];												  var black = [];												  var green = [];												  for(var courseCode in coursesIdSorted){													 var courseIdSorted = coursesIdSorted[courseCode];													 var foundItOnce = false;													 var missingProfs = 0;													 for(var dataCourseProficiency in dataCoursesProficiencies)	{														var courseId = dataCoursesProficiencies[dataCourseProficiency].course_proficiency.course_id;														var slot = dataCoursesProficiencies[dataCourseProficiency].course_proficiency.slot;														var proficiencyId = dataCoursesProficiencies[dataCourseProficiency].course_proficiency.proficiency_id;															 if(courseId == courseIdSorted && slot == 1) {																																var foundIt = false;																for(myProficiencyIdSorted in myProficienciesIdSorted){																	var myProficiencyId = myProficienciesIdSorted[myProficiencyIdSorted];																	if (proficiencyId == myProficiencyId) {																		foundIt = true;																		foundItOnce = true;																	}																}																if(!foundIt) {																	missingProfs ++;																}																				 }													 }													 													   if(missingProfs>=1){															if(foundItOnce){																yellow = yellow.concat(courseIdSorted);															}else{																black = black.concat(courseIdSorted);															}														} else{																green = green.concat(courseIdSorted);														}												  }												  												  // sort them												  for(var k = 1; k < yellow.length; k++) {													if (yellow[k] == yellow[k-1]) {														yellow.splice(k, 1);														k--;													}												 }												  for(var j = 1; j < green.length; j++) {													if (green[j] == green[j-1]) {														green.splice(j, 1);														j--;													}												 }												  for(var l = 1; l < black.length; l++) {													if (black[l] == black[l-1]) {														black.splice(l, 1);														l--;													}												 }												 												  // add color to the courses												  for(var courseCode in data){														var courseId = data[courseCode].instance.course_id;														var instance = data[courseCode].instance.id;														for(var courseCode in green ){															var greenCourseId = green[courseCode];															if(courseId == greenCourseId){																if($("#"+ instance).not(".cantakenCourse")){																	$("#"+ instance).addClass("cantakenCourse");																}																if($("#"+ instance).not(".cantakenCourseNoBorder")){																	$("#"+ instance).addClass("cantakenCourseNoBorder");																}																	if($("#"+ instance).hasClass("cantakenCourseBorder")){																	$("#"+ instance).removeClass("cantakenCourseBorder");																}																if($("#"+ instance).parent("li").hasClass("noDisplay")){																	$("#"+ instance).parent("li").removeClass("noDisplay");																}																																	if($("#mycourse ul li ul li a").hasClass("cantakenCourse")){																	$("#mycourse ul li ul li a").removeClass("cantakenCourse");																}																																if($("#mycourse ul li ul li a").hasClass("noDisplay")){																	$("#mycourse ul li ul li a").removeClass("noDisplay");																}															}																																												}												  }												  												  // hover over the courses list to highlight the relative proficiencies												  $(".square").hover(													 function(event) { //mouseover function														  var myId = event.currentTarget.id;														  for(var courseCode in data) {																var instance = data[courseCode].instance.id;																if(instance == myId) {																	var courseId = data[courseCode].instance.course_id;																	for(var courseCode in dataCoursesProficiencies){																		var courseId2 = dataCoursesProficiencies[courseCode].course_proficiency.course_id;																		var proficiencyDirection = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_direction;																		var slot = dataCoursesProficiencies[courseCode].course_proficiency.slot;																		if(courseId == courseId2){																			if(proficiencyDirection == "Outgoing") {																				var proficiencyId = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_id;																				$.each(proficiencyNameToIdLevel,function(key,value){																						for(var i=0; i< value.length; i++){																							 var proficiencyId2 = value[i].id;																							 var proficiencyLevel = value[i].level;																							 if (proficiencyId == proficiencyId2) {																								 $("#" + key).addClass("outgoingproficiency");																								 $("#" + key).addClass("level"+ proficiencyLevel);																							 }																						 }																				});																			}else if(proficiencyDirection == "Incoming" && slot == 1) {																				var proficiencyId = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_id;																				$.each(proficiencyNameToIdLevel,function(key,value){																						for(var i=0; i< value.length; i++){																							 var proficiencyId2 = value[i].id;																							 var proficiencyLevel = value[i].level;																							 if (proficiencyId == proficiencyId2) {																								 $("#" + key + ">div >p").addClass("incomingproficiency");																								 $("#" + key + ">div >p").addClass("level"+ proficiencyLevel);																							 }																						 }																				});																			}																	}																	}																																		//description																	for(var courseCode in dataCourses){																		var courseId2 = dataCourses[courseCode].course.id;																		if(courseId == courseId2){																			var title = dataCourses[courseCode].course.title;																			var number = dataCourses[courseCode].course.number;																			var time = dataCourses[courseCode].course.prefix;																			var credit = dataCourses[courseCode].course.credit_hours;																			var totalSeats = dataCourses[courseCode].course.total_seats;																			var reservedSeats = dataCourses[courseCode].course.reserved_seats																			var description = dataCourses[courseCode].course.description;																				$("#rightDivInner ul  li  ul li").addClass("dpbackground");																				$(".title").append($("<span>"+title+"</span>").fadeIn(0));																				$(".credit").append($("<span>Credit: "+credit+"</span>").fadeIn(0));																				$(".totalSeats").append($("<span>Total Seats: "+totalSeats+"</span>").fadeIn(0));																				$(".reservedSeats").append($("<span>Reserved Seats:"+reservedSeats+"</span>").fadeIn(0));																				$(".description").append($("<span>"+description+"</span>").fadeIn(0));																		}																	}																}	  														   }														 },													 function(event) { //mouseover 													  var myId = event.currentTarget.id;													  for(var courseCode in data) {															var instance = data[courseCode].instance.id;															if(instance == myId) {																var courseId = data[courseCode].instance.course_id;																for(var courseCode in dataCoursesProficiencies){																	var courseId2 = dataCoursesProficiencies[courseCode].course_proficiency.course_id;																	var proficiencyDirection = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_direction;																	var slot = dataCoursesProficiencies[courseCode].course_proficiency.slot;																	if(courseId == courseId2){																		if(proficiencyDirection == "Outgoing") {																			var proficiencyId = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_id;																			$.each(proficiencyNameToIdLevel,function(key,value){																					for(var i=0; i< value.length; i++){																						 var proficiencyId2 = value[i].id;																						 var proficiencyLevel = value[i].level;																						 if (proficiencyId == proficiencyId2) {																							 $("#" + key).removeClass("outgoingproficiency");																							 $("#" + key).removeClass("level"+ proficiencyLevel);																						 }																					 }																			});																		}else if(proficiencyDirection == "Incoming" && slot == 1) {																			var proficiencyId = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_id;																			$.each(proficiencyNameToIdLevel,function(key,value){																					for(var i=0; i< value.length; i++){																						 var proficiencyId2 = value[i].id;																						 var proficiencyLevel = value[i].level;																						 if (proficiencyId == proficiencyId2) {																							 $("#" + key + ">div >p").removeClass("incomingproficiency");																							 $("#" + key + ">div >p").removeClass("level"+ proficiencyLevel);																						 }																					 }																			});																		}																}																}																for(var courseCode in dataCourses){																	var courseId2 = dataCourses[courseCode].course.id;																	if(courseId == courseId2){																		var title = dataCourses[courseCode].course.title;																		var number = dataCourses[courseCode].course.number;																		var time = dataCourses[courseCode].course.prefix;																		var credit = dataCourses[courseCode].course.credit_hour;																		var totalSeats = dataCourses[courseCode].course.total_Seats																		var description = dataCourses[courseCode].course.description;																																				$("#rightDivInner ul  li  ul li").removeClass("dpbackground");																		$(".title").find("span").remove();																		$(".credit").find("span").remove();																		$(".totalSeats").find("span").remove();																		$(".reservedSeats").find("span").remove();																		$(".description").find("span").remove();																	}																}															}																  														}																	 }												  );																	  // assign the presemester's value as 0 for future calculation;												  var semesters = [];												  for(var i=0; i< myProficienciesIdSorted.length; i++){													 semesters  = semesters.concat(a);												  }												  												  instanceInfo=new Object();												  instanceInfo.semesterInfo=semesters;												  instanceInfo.proficiencyInfo=myProficienciesIdSorted;												  												  // click the squares to choose courses												  $(".square").click(function(event){														var myId = event.currentTarget.id;														var tempSemester = 0;														var iterSemester = 0;														var tempCourse = 0;														var tempInstance = 0;																			if ($('#'+myId).hasClass("cantakenCourse")) {															var indexOfId = $.inArray(myId,lockedInstances);															var outgoingProficienciesId = [];															var yellowClicked = [];															var greenClicked = [];															var blackClicked = [];															var currentSemesters = [];																														// look for the outgoing proficiencies															for(var courseCode in data) {																var instance = data[courseCode].instance.id;																																if(instance == myId) {																	var courseId = data[courseCode].instance.course_id;																	var semesterId = data[courseCode].instance.semester_id;																	tempSemester = semesterId;																	for(var courseCode2 in dataCoursesProficiencies){																		var courseId2 = dataCoursesProficiencies[courseCode2].course_proficiency.course_id;																		var proficiencyDirection = dataCoursesProficiencies[courseCode2].course_proficiency.proficiency_direction;																		if(courseId == courseId2 && proficiencyDirection == "Outgoing" ) {																			var profciencyId = dataCoursesProficiencies[courseCode2].course_proficiency.proficiency_id;																				outgoingProficienciesId = outgoingProficienciesId.concat(profciencyId);																			currentSemesters = currentSemesters.concat(semesterId);																		}																	}																																	}															}																														// add/delete courses															if(indexOfId == -1) { 																															var lockedCourses = [];																var lockedSemesters = [];																																//add courses																lockedInstances.push(myId);																$(event.currentTarget).addClass("pinnedCourse");																										//add current instance's semesters to instance object's semester array 																instanceInfo.semesterInfo = instanceInfo.semesterInfo.concat(currentSemesters);																					//add current instance's proficiencies to my proficiency list																instanceInfo.proficiencyInfo = instanceInfo.proficiencyInfo.concat(outgoingProficienciesId);																																//find the instance's lockedCourses and lockedSemesters 																for(var courseCode in lockedInstances){																	var myInstance = lockedInstances[courseCode];																												for(var courseCode in data){																		var instance = data[courseCode].instance.id;																		var course = data[courseCode].instance.course_id;																		var semester = data[courseCode].instance.semester_id;																			if(instance == myInstance){																			lockedCourses = lockedCourses.concat(course);																			lockedSemesters = lockedSemesters.concat(semester);																		}																	}																}																															// if the semester id of the new added instance is smaller than the existed one, delete the existed instance. 																for(var i=0; i<data.length; i++){																	var instanceId = data[i].instance.id;																																		if(instanceId == myId){																		var courseId = data[i].instance.course_id;																		var semesterId = data[i].instance.semester_id;																																				for(var j=0; j<lockedCourses.length; j++){																			var myCourse = lockedCourses[j];																																						if(myCourse == courseId){																					var mySemester = lockedSemesters[j];																																										if(semesterId < mySemester){																					   lockedInstances.splice(j, 1);																																									}																																							}																		}																	}																}																																													} else { 																// delete courses																lockedInstances.splice(indexOfId,1);																$(event.currentTarget).removeClass("pinnedCourse");																																// delete current semester and outgoing proficiencies in the instance object																for(var i = 0; i<instanceInfo.proficiencyInfo.length; i++){																	for (var j=0;  j<currentSemesters.length; j++) {																		for(var k=0; k<outgoingProficienciesId.length; k++){																			if(instanceInfo.proficiencyInfo[i] == outgoingProficienciesId[k] && instanceInfo.semesterInfo[i] == currentSemesters[j]){																				var deleteProfId3 = $.inArray(instanceInfo.proficiencyInfo[i], instanceInfo.proficiencyInfo);																				if (deleteProfId3 > -1 ) 																				instanceInfo.proficiencyInfo.splice(deleteProfId3, 1);																																								var deleteSemesterId3 = $.inArray(instanceInfo.semesterInfo[i], instanceInfo.semesterInfo);																				if (deleteSemesterId3 > -1)																				instanceInfo.semesterInfo.splice(deleteSemesterId3, 1);																			}																		}																	}																}																															}																														// update instanceInfo.proficiencyInfo and .semesterInfo:															instanceInfo.semesterInfo=semesters;															instanceInfo.proficiencyInfo=myProficienciesIdSorted;																														for(var courseCode in lockedInstances){																var myInstance = lockedInstances[courseCode];																											for(var courseCode in data){																	var instance = data[courseCode].instance.id;																	var course = data[courseCode].instance.course_id;																	var semester = data[courseCode].instance.semester_id;																		if(instance == myInstance){																		for (var profId in dataCoursesProficiencies) {																			var courseInProfs = dataCoursesProficiencies[profId].course_proficiency.course_id;																			var profDirec = dataCoursesProficiencies[profId].course_proficiency.proficiency_direction;																																						if (courseInProfs == course && profDirec == "Outgoing") {																				var profInProfs = dataCoursesProficiencies[profId].course_proficiency.proficiency_id;																				instanceInfo.proficiencyInfo = instanceInfo.proficiencyInfo.concat(profInProfs);																				instanceInfo.semesterInfo = instanceInfo.semesterInfo.concat(semester);																			}																		}																	}																}															}																$.ajax({																url: "/add_path_instances.json?instanceId=" + myId,																type: "GET"															});																															for (iterSemester = 7; iterSemester <= 21; iterSemester += 2) {																for(var courseCode in data){																  var course = data[courseCode].instance.course_id;																  var semester = data[courseCode].instance.semester_id;																  var instance = data[courseCode].instance.id;																  var foundItOnce = false;																  var missingProfs = 0;																  var sameCourseRepeated;											  																  if (semester == iterSemester) {																	sameCourseRepeated = false;																	for (var i=0; i<lockedInstances.length; i++) {																	   var lockedInstance = lockedInstances[i];																	   for(var courseCode2 in data){																		   var myCourse = data[courseCode2].instance.course_id;																		   var mySemester = data[courseCode2].instance.semester_id;																		   var myInstance = data[courseCode2].instance.id;																		   																		   if(lockedInstance == myInstance){																			   if(course == myCourse && semester > mySemester){																					sameCourseRepeated = true;																					break;																			   }																		   }																		}																																			}																																		if (sameCourseRepeated) {																		missingProfs = 1;																		foundItOnce = false;																		 // goto blackClicked																	} else {																	    for(var dataCourseProficiency in dataCoursesProficiencies){																			 var courseId = dataCoursesProficiencies[dataCourseProficiency].course_proficiency.course_id;																			 var slot = dataCoursesProficiencies[dataCourseProficiency].course_proficiency.slot;																			 if(courseId == course && slot == 1) {																				var proficiencyId = dataCoursesProficiencies[dataCourseProficiency].course_proficiency.proficiency_id;																				var foundIt = false;																																								for(var i=0; i<instanceInfo.proficiencyInfo.length; i++){																					if (proficiencyId == instanceInfo.proficiencyInfo[i] && semester > instanceInfo.semesterInfo[i] ) {																																		foundIt = true;																						foundItOnce = true;																					}																				}																																								if(!foundIt ) {																					missingProfs ++;																				}																			 }																		  }																	}																									  if(missingProfs >= 1){																			if(foundItOnce){																				yellowClicked = yellowClicked.concat(instance);																				}else{																				blackClicked = blackClicked.concat(instance);																			}																																						// remove this instance (not available now) from lockedInstances:																			for (var i = 0; i < lockedInstances.length; i++)																			  if (instance == lockedInstances[i])																			  lockedInstances.splice(i, 1);																	  }else{																			greenClicked = greenClicked.concat(instance);																	  }																	  																  }																}															}																														// update instanceInfo.proficiencyInfo and .semesterInfo:															instanceInfo.semesterInfo=semesters;															instanceInfo.proficiencyInfo=myProficienciesIdSorted;																														for(var courseCode in lockedInstances){																var myInstance = lockedInstances[courseCode];																											for(var courseCode in data){																	var instance = data[courseCode].instance.id;																	var course = data[courseCode].instance.course_id;																	var semester = data[courseCode].instance.semester_id;																		if(instance == myInstance){																		for (var profId in dataCoursesProficiencies) {																			var courseInProfs = dataCoursesProficiencies[profId].course_proficiency.course_id;																			var profDirec = dataCoursesProficiencies[profId].course_proficiency.proficiency_direction;																																						if (courseInProfs == course && profDirec == "Outgoing") {																				var profInProfs = dataCoursesProficiencies[profId].course_proficiency.proficiency_id;																				instanceInfo.proficiencyInfo = instanceInfo.proficiencyInfo.concat(profInProfs);																				instanceInfo.semesterInfo = instanceInfo.semesterInfo.concat(semester);																			}																		}																	}																}															}																														// add property to green, yellow and black instances															for(var courseCode in data){																var instance = data[courseCode].instance.id;																var courseId = data[courseCode].instance.course_id;																var semesterId = data[courseCode].instance.semester_id;																																for(var courseCode in greenClicked ){																	var greenClickedInstanceId = greenClicked[courseCode];																	if(instance == greenClickedInstanceId){																		if($("#"+ instance).hasClass("cantakenCourseNoBorder")){																			$("#"+ instance).addClass("cantakenCourse");																			if($("#"+ instance).parent("li").hasClass("noDisplay"))   																			$("#"+ instance).parent("li").removeClass("noDisplay");																																																		}else{																			$("#"+ instance).addClass("cantakenCourse");																			$("#"+ instance).addClass("cantakenCourseBorder");																			if($("#"+ instance).parent("li").hasClass("noDisplay"))   																			$("#"+ instance).parent("li").removeClass("noDisplay");																																}																	}																}																																// please see black and yellow instances the same here. I keep their difference for future use in case																// although the yellow ones are not displayed on the interface.																for(var courseCode in yellowClicked ){																	var yellowClickedInstanceId = yellowClicked[courseCode];																	if(instance == yellowClickedInstanceId){																			if($("#"+ instance).hasClass("cantakenCourse"))  																		   $("#"+ instance).removeClass("cantakenCourse");																		if($("#"+ instance).hasClass("cantakenCourseBorder"))																		   $("#"+ instance).removeClass("cantakenCourseBorder");																		if($("#"+ instance).parent("li").not(".noDisplay"))																		   $("#"+ instance).parent("li").addClass("noDisplay");																		if($("#" + instance).hasClass("pinnedCourse")){																		   $("#" + instance).removeClass("pinnedCourse"); 																		}																		}																		}																for(var courseCode in blackClicked ){																	var blackClickedInstanceId = blackClicked[courseCode];																	if(instance == blackClickedInstanceId){																		if($("#"+ instance).hasClass("cantakenCourse"))																		   $("#"+ instance).removeClass("cantakenCourse");																		if($("#"+ instance).hasClass("cantakenCourseBorder"))																		   $("#"+ instance).removeClass("cantakenCourseBorder");																		if($("#"+ instance).parent("li").not(".noDisplay"))																		   $("#"+ instance).parent("li").addClass("noDisplay");																		if($("#" + instance).hasClass("pinnedCourse")){																		   $("#" + instance).removeClass("pinnedCourse"); 																		}																		}																}																}																																 }										 														return false;												  });												  										  // finish calcuation												  										  });										 										  // click the "edit completed courses" button to reselect the completed courses										  $("#redo").click(function(event){ 										  												// show/hide the items												$(".followingsemester").hide();												$("#mycourse ul li ul li").remove();												$("#course ul li ul li").remove();												$("#confirm").show();												$("#redo").hide();												$("#save").hide();												$("#clear").hide();			 												//lockedCompletedCourses.length = 0;												myProficienciesId.length = 0;												lockedInstances.length = 0;																								// build the pre-selected course list firstly												for (var i=0; i<dataCourses.length; i++) {													 var myPrefix = dataCourses[i].course.prefix;													 var myNumber = dataCourses[i].course.number;													 var myTitle = dataCourses[i].course.title;													 var myCourseId = dataCourses[i].course.id;													 $("#mycourse ul li ul").append("<li>" + "<a href='#' class='mycoursesquare' id='" + myCourseId + "' >" +"<strong>" + myPrefix + "&nbsp;" + myNumber + "</strong>"+"<br/>"+ myTitle +"</a>" + "</li>" );																										 for(var j=0; j<lockedCompletedCourses.length; j++){														var course = lockedCompletedCourses[j];																												if (myCourseId == course){														 $("#"+ course).addClass("pinnedMyCourseBorder");														}													 } 												 };																								$(".mycoursesquare").click(function(event){													var myId2 = event.currentTarget.id;													var indexOfId2 = $.inArray(myId2,lockedCompletedCourses);																										// post data to the user_courses table		 													$.ajax({														url: "/add_completed.json?courseId=" + myId2,														type: "GET"													});																										if(indexOfId2 == -1) { 														// add courses														lockedCompletedCourses.push(myId2);														$(event.currentTarget).addClass("pinnedMyCourseBorder");													}else{														// delete courses														lockedCompletedCourses.splice(indexOfId2,1);														$(event.currentTarget).removeClass("pinnedMyCourseBorder");													}													return false;													});																								// remove previous results on the interface												if($('div').hasClass('ownedproficiency')){													$('div').removeClass('ownedproficiency');												}else if($('div').hasClass('level100')){													$('div').removeClass('level100');												}else if($('div').hasClass('level100')){													$('div').removeClass('level200');												}else if($('div').hasClass('level300')){													$('div').removeClass('level300');												}else if($('div').hasClass('level400')){													$('div').removeClass('level400');												}																						  });										  										  // save the path the user has built to database										  $("#save").click(function(event){										  												//add a path												$.ajax({														url: "/add_user_path.json",														type: "GET"												}); 										  												for(var courseCode in lockedInstances){													var instanceId = lockedInstances[courseCode];																										// post data to the path_instance table 													$.ajax({														url: "/add_path_instances.json?instanceId=" + instanceId,														type: "GET"													}); 																								}																						  										  });										  										  // clear the path and rebuild a new path										  $("#clear").click(function(event){										  												for(var courseCode in lockedInstances){													var instanceId = lockedInstances[courseCode];													// post data to path_instance table 													$.ajax({														url: "/delete_path_instances.json?instanceId=" + instanceId,														type: "GET"													}); 																								}																								lockedInstances.length = 0;												$("#mycourse ul li ul li").remove();												$("#course ul li ul li").remove();																								 // start calcuation												 // semester-based courses												 for (var j=0; j<data.length; j++) {													var semester = data[j].instance.semester_id													var course = data[j].instance.course_id													var instance = data[j].instance.id																		if (semester == firstSemester) {															var userHasTaken = false;															for (var courseCode in lockedCompletedCourses) {																var completedCourse = lockedCompletedCourses[courseCode];																if (completedCourse == course)  {																	userHasTaken = true;																	break;																}																}																														//filtered courses															if (!userHasTaken) {																for (var i=0; i<dataCourses.length; i++) {																	 var prefix = dataCourses[i].course.prefix // Get the prefix of courses, for example "AME"																	 var number = dataCourses[i].course.number   // Get the number of courses, for example "294"																	 var title = dataCourses[i].course.title  // Get the title of courses, for example "Introduction to Digital Culture"																	 var courseId = dataCourses[i].course.id  // Get the courseId of courses, for example "82"																																																																				 if (course == courseId && course != 110) {  // if course id in semester table matches the id of courses in course table																																if (number < 220) { // if course number is less than 200 																				$("#2011spring li ul").append("<li>" + "<a href='#' id='" + instance + "' class='cantakenCourse square'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			} else {																				$("#2011spring li ul").append("<li class='noDisplay'>" + "<a href='#' id='" + instance + "' class='square'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			}																	 }																																		 															}														}													};														if (semester == firstSemester+2) {															var userHasTaken = false;															for (var courseCode in lockedCompletedCourses) {																var completedCourse = lockedCompletedCourses[courseCode];																if (completedCourse == course)  {																	userHasTaken = true;																	break;																}																}															if (!userHasTaken) {																for (var i=0; i<dataCourses.length; i++) {																	 var prefix = dataCourses[i].course.prefix // Get the prefix of courses, for example "AME"																	 var number = dataCourses[i].course.number   // Get the number of courses, for example "294"																	 var title = dataCourses[i].course.title  // Get the title of courses, for example "Introduction to Digital Culture"																	 var courseId = dataCourses[i].course.id  // Get the courseId of courses, for example "82"																																		 if (course == courseId && course != 110) {  // if course id in semester table matches the id of courses in course table																																																				if (number < 220) { // if course number is less than 200 																				$("#2011fall li ul").append("<li>" + "<a href='#' id='" + instance + "' class='cantakenCourse square cantakenCourseNoBorder'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			} else {																				$("#2011fall li ul").append("<li class='noDisplay'>" + "<a href='#' id='" + instance + "' class='square'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			}																	 }																	 																}															}													};													if (semester == firstSemester+4) {															var userHasTaken = false;															for (var courseCode in lockedCompletedCourses) {																var completedCourse = lockedCompletedCourses[courseCode];																if (completedCourse == course)  {																	userHasTaken = true;																	break;																}																}															if (!userHasTaken) {																for (var i=0; i<dataCourses.length; i++) {																	 var prefix = dataCourses[i].course.prefix // Get the prefix of courses, for example "AME"																	 var number = dataCourses[i].course.number   // Get the number of courses, for example "294"																	 var title = dataCourses[i].course.title  // Get the title of courses, for example "Introduction to Digital Culture"																	 var courseId = dataCourses[i].course.id  // Get the courseId of courses, for example "82"																	 if (course == courseId && course != 110) {  // if course id in semester table matches the id of courses in course table																																																				if (number < 220 ) { // if course number is less than 200 																				$("#2012spring li ul").append("<li>" + "<a href='#' id='" + instance + "' class='cantakenCourse square cantakenCourseNoBorder'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			} else {																				$("#2012spring li ul").append("<li class='noDisplay'>" + "<a href='#' id='" + instance + "' class='square'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			}																	 }																																		 														}															}																		};														if (semester == firstSemester+6) {															var userHasTaken = false;															for (var courseCode in lockedCompletedCourses) {																var completedCourse = lockedCompletedCourses[courseCode];																if (completedCourse == course)  {																	userHasTaken = true;																	break;																}																}															if (!userHasTaken) {																for (var i=0; i<dataCourses.length; i++) {																	 var prefix = dataCourses[i].course.prefix // Get the prefix of courses, for example "AME"																	 var number = dataCourses[i].course.number   // Get the number of courses, for example "294"																	 var title = dataCourses[i].course.title  // Get the title of courses, for example "Introduction to Digital Culture"																	 var courseId = dataCourses[i].course.id  // Get the courseId of courses, for example "82"																																		 if (course == courseId && course != 110) {  // if course id in semester table matches the id of courses in course table																																																				if (number < 220) { // if course number is less than 200 																				$("#2012fall li ul").append("<li>" + "<a href='#' id='" + instance + "' class='cantakenCourse square cantakenCourseNoBorder'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			} else {																				$("#2012fall li ul").append("<li class='noDisplay'>" + "<a href='#' id='" + instance + "' class='square'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			}																	 }																																		 														}															}													};													if (semester == firstSemester+8) {															var userHasTaken = false;															for (var courseCode in lockedCompletedCourses) {																var completedCourse = lockedCompletedCourses[courseCode];																if (completedCourse == course)  {																	userHasTaken = true;																	break;																}																}																														if (!userHasTaken) {																for (var i=0; i<dataCourses.length; i++) {																	 var prefix = dataCourses[i].course.prefix // Get the prefix of courses, for example "AME"																	 var number = dataCourses[i].course.number   // Get the number of courses, for example "294"																	 var title = dataCourses[i].course.title  // Get the title of courses, for example "Introduction to Digital Culture"																	 var courseId = dataCourses[i].course.id  // Get the courseId of courses, for example "82"																																		 if (course == courseId && course != 110)  {  // if course id in semester table matches the id of courses in course table																																																				if (number < 220) { // if course number is less than 200 																				$("#2013spring li ul").append("<li>" + "<a href='#' id='" + instance + "' class='cantakenCourse square cantakenCourseNoBorder'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			} else {																				$("#2013spring li ul ").append("<li class='noDisplay'>" + "<a href='#' id='" + instance + "' class='square'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			}																	 }																																		 														}															}													};													if (semester == firstSemester+10) {															var userHasTaken = false;															for (var courseCode in lockedCompletedCourses) {																var completedCourse = lockedCompletedCourses[courseCode];																if (completedCourse == course)  {																	userHasTaken = true;																	break;																}																}																														if (!userHasTaken) {																for (var i=0; i<dataCourses.length; i++) {																	 var prefix = dataCourses[i].course.prefix // Get the prefix of courses, for example "AME"																	 var number = dataCourses[i].course.number   // Get the number of courses, for example "294"																	 var title = dataCourses[i].course.title  // Get the title of courses, for example "Introduction to Digital Culture"																	 var courseId = dataCourses[i].course.id  // Get the courseId of courses, for example "82"																																		 if (course == courseId) {  // if course id in semester table matches the id of courses in course table																																																				if (number < 220) { // if course number is less than 200 																				$("#2013fall li ul").append("<li>" + "<a href='#' id='" + instance + "' class='cantakenCourse square cantakenCourseNoBorder'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			} else {																				$("#2013fall li ul").append("<li class='noDisplay'>" + "<a href='#' id='" + instance + "' class='square'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			}																	 }																																		 														}															}													};													if (semester == firstSemester+12) {															var userHasTaken = false;															for (var courseCode in lockedCompletedCourses) {																var completedCourse = lockedCompletedCourses[courseCode];																if (completedCourse == course)  {																	userHasTaken = true;																	break;																}																}																														if (!userHasTaken) {																for (var i=0; i<dataCourses.length; i++) {																	 var prefix = dataCourses[i].course.prefix // Get the prefix of courses, for example "AME"																	 var number = dataCourses[i].course.number   // Get the number of courses, for example "294"																	 var title = dataCourses[i].course.title  // Get the title of courses, for example "Introduction to Digital Culture"																	 var courseId = dataCourses[i].course.id  // Get the courseId of courses, for example "82"																																		 if (course == courseId) {  // if course id in semester table matches the id of courses in course table																																																				if (number < 220) { // if course number is less than 200 																				$("#2014spring li ul").append("<li>" + "<a href='#' id='" + instance + "' class='cantakenCourse square cantakenCourseNoBorder'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			} else {																				$("#2014spring li ul").append("<li class='noDisplay'>" + "<a href='#' id='" + instance + "' class='square'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			}																	 }																																		 														}															}													};													if (semester == firstSemester+14) {															var userHasTaken = false;															for (var courseCode in lockedCompletedCourses) {																var completedCourse = lockedCompletedCourses[courseCode];																if (completedCourse == course)  {																	userHasTaken = true;																	break;																}																}																														if (!userHasTaken) {																for (var i=0; i<dataCourses.length; i++) {																	 var prefix = dataCourses[i].course.prefix // Get the prefix of courses, for example "AME"																	 var number = dataCourses[i].course.number   // Get the number of courses, for example "294"																	 var title = dataCourses[i].course.title  // Get the title of courses, for example "Introduction to Digital Culture"																	 var courseId = dataCourses[i].course.id  // Get the courseId of courses, for example "82"																																		 if (course == courseId) {  // if course id in semester table matches the id of courses in course table																																																				if (number < 220) { // if course number is less than 200 																				$("#2014fall li ul").append("<li>" + "<a href='#' id='" + instance + "' class='cantakenCourse square cantakenCourseNoBorder'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			} else {																				$("#2014fall li ul").append("<li class='noDisplay'>" + "<a href='#' id='" + instance + "' class='square'>" +"<strong>" + prefix + "&nbsp;" + number + "</strong>"+"<br/>"+ title +"</a>" + "</li>" );																			}																	 }																																		 														}															}													};														};																				 // show my courses												 for(var j=0; j<lockedCompletedCourses.length; j++){													var myCompleteCourse = lockedCompletedCourses[j];													for (var i=0; i<dataCourses.length; i++) {														var myCourseId = dataCourses[i].course.id;														if(myCourseId == myCompleteCourse){															 var myPrefix = dataCourses[i].course.prefix;															 var myNumber = dataCourses[i].course.number;															 var myTitle = dataCourses[i].course.title;															  $("#mycourse ul li ul").append("<li>" + "<a href='#' class='mycoursesquare' id='" + myCourseId +"' >" +"<strong>" + myPrefix + "&nbsp;" + myNumber + "</strong>"+"<br/>"+ myTitle +"</a>" + "</li>" );															  $("#redo").show();														}													}												 }												 												 // my proficiencies												 for(var p=0; p<lockedCompletedCourses.length; p++){																									var myCourse = lockedCompletedCourses[p];																									for (var q=0; q<dataCoursesProficiencies.length; q++) {														var courseId = dataCoursesProficiencies[q].course_proficiency.course_id;														var proficiencyDirection = dataCoursesProficiencies[q].course_proficiency.proficiency_direction;														var proficiencyId = dataCoursesProficiencies[q].course_proficiency.proficiency_id;																												if(courseId == myCourse){																														// present in the proficiency list															$.each(proficiencyNameToIdLevel,function(key,value){																for(var p=0; p< value.length; p++){																	 var proficiencyId2 = value[p].id;																	 var proficiencyLevel = value[p].level;																	 if (proficiencyId == proficiencyId2) {																		 $("#" + key + ">div").addClass("ownedproficiency");																		 $("#" + key + ">div").addClass("level"+ proficiencyLevel);																	 }																 }															});																														// add to myProficienciesId list															myProficienciesId = myProficienciesId.concat(proficiencyId);														}													}												}																								 // sort array and unique them (sort array for the easy-to-distinguish purpose)												 function sortNumber(a,b) {													return a-b;												};										 												 var myProficienciesIdSorted = myProficienciesId.sort(sortNumber);										 												 for(var i = 1; i < myProficienciesIdSorted.length; i++) {													if (myProficienciesIdSorted[i] == myProficienciesIdSorted[i-1]) {														myProficienciesIdSorted.splice(i, 1);														i--;													}												 }																						 // hover over the proficiency list to highlight potential courses												 $("#proficiency_list a").hover(													  function(event) { //mouseOver														  var myId = event.currentTarget.id; 														  var highlightedId = proficiencyNameToId[myId]; 														 																														for (var courseCode in highlightedId) {																	var proficiencyId = highlightedId[courseCode];																	for (var courseCode in dataCoursesProficiencies) {																		var proficiencyId2 = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_id; 																		var proficiencyDirection = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_direction;																		if(proficiencyId == proficiencyId2 && proficiencyDirection == "Outgoing") {																			var courseId = dataCoursesProficiencies[courseCode].course_proficiency.course_id;																			for(var courseCode in data) {																				var instance = data[courseCode].instance.id;																				var courseId2 = data[courseCode].instance.course_id;																				if(courseId == courseId2) {																					if($("#" + instance).hasClass("mycoursesquare")){																																											}else{																					$("#" + instance).addClass("highlightIncoming");																					}																				}																			}																		}																	}																}														 },													  function(event) { //mouseOver														  var myId = event.currentTarget.id; 														  var highlightedId = proficiencyNameToId[myId];  																for (var courseCode in highlightedId) {																	var proficiencyId = highlightedId[courseCode];																			for (var courseCode in dataCoursesProficiencies) {																				var proficiencyId2 = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_id; 																				var proficiencyDirection = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_direction;																				if(proficiencyId == proficiencyId2 && proficiencyDirection == "Outgoing") {																					var courseId = dataCoursesProficiencies[courseCode].course_proficiency.course_id;																					for(var courseCode in data) {																						var instance = data[courseCode].instance.id;																						var courseId2 = data[courseCode].instance.course_id;																						if(courseId == courseId2) {																							$("#" + instance).removeClass("highlightIncoming");																						}																					}																				}																			}																}														 }												  );										  												  // get all course ids												  var coursesId = [];												  for(var dataCourseProficiency in dataCoursesProficiencies) {													 var courseId = dataCoursesProficiencies[dataCourseProficiency].course_proficiency.course_id;													 coursesId = coursesId.concat(courseId);												  };																						  function sortNumber(a,b) {													return a-b;												  };												  												  var coursesIdSorted = coursesId.sort(sortNumber);												  for(var i = 1; i < coursesIdSorted.length; i++) {														if (coursesIdSorted[i] == coursesIdSorted[i-1]) {															coursesIdSorted.splice(i, 1);															i--;														}												  }																	  // distinguish all courses with colors												  var yellow = [];												  var black = [];												  var green = [];												  for(var courseCode in coursesIdSorted){													 var courseIdSorted = coursesIdSorted[courseCode];													 var foundItOnce = false;													 var missingProfs = 0;													 for(var dataCourseProficiency in dataCoursesProficiencies)	{														var courseId = dataCoursesProficiencies[dataCourseProficiency].course_proficiency.course_id;														var slot = dataCoursesProficiencies[dataCourseProficiency].course_proficiency.slot;														var proficiencyId = dataCoursesProficiencies[dataCourseProficiency].course_proficiency.proficiency_id;															 if(courseId == courseIdSorted && slot == 1) {																																var foundIt = false;																for(myProficiencyIdSorted in myProficienciesIdSorted){																	var myProficiencyId = myProficienciesIdSorted[myProficiencyIdSorted];																	if (proficiencyId == myProficiencyId) {																		foundIt = true;																		foundItOnce = true;																	}																}																if(!foundIt) {																	missingProfs ++;																}																				 }													 }													 													   if(missingProfs>=1){															if(foundItOnce){																yellow = yellow.concat(courseIdSorted);															}else{																black = black.concat(courseIdSorted);															}														} else{																green = green.concat(courseIdSorted);														}												  }												  												  // sort them												  for(var k = 1; k < yellow.length; k++) {													if (yellow[k] == yellow[k-1]) {														yellow.splice(k, 1);														k--;													}												 }												  for(var j = 1; j < green.length; j++) {													if (green[j] == green[j-1]) {														green.splice(j, 1);														j--;													}												 }												  for(var l = 1; l < black.length; l++) {													if (black[l] == black[l-1]) {														black.splice(l, 1);														l--;													}												 }												 												  // add color to the courses												  for(var courseCode in data){														var courseId = data[courseCode].instance.course_id;														var instance = data[courseCode].instance.id;														for(var courseCode in green ){															var greenCourseId = green[courseCode];															if(courseId == greenCourseId){																if($("#"+ instance).not(".cantakenCourse")){																	$("#"+ instance).addClass("cantakenCourse");																}																if($("#"+ instance).not(".cantakenCourseNoBorder")){																	$("#"+ instance).addClass("cantakenCourseNoBorder");																}																	if($("#"+ instance).hasClass("cantakenCourseBorder")){																	$("#"+ instance).removeClass("cantakenCourseBorder");																}																if($("#"+ instance).parent("li").hasClass("noDisplay")){																	$("#"+ instance).parent("li").removeClass("noDisplay");																}																																	if($("#mycourse ul li ul li a").hasClass("cantakenCourse")){																	$("#mycourse ul li ul li a").removeClass("cantakenCourse");																}																																if($("#mycourse ul li ul li a").hasClass("noDisplay")){																	$("#mycourse ul li ul li a").removeClass("noDisplay");																}															}																																												}												  }												  												  // hover over the courses list to highlight the relative proficiencies												  $(".square").hover(													 function(event) { //mouseover function														  var myId = event.currentTarget.id;														  for(var courseCode in data) {																var instance = data[courseCode].instance.id;																if(instance == myId) {																	var courseId = data[courseCode].instance.course_id;																	for(var courseCode in dataCoursesProficiencies){																		var courseId2 = dataCoursesProficiencies[courseCode].course_proficiency.course_id;																		var proficiencyDirection = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_direction;																		var slot = dataCoursesProficiencies[courseCode].course_proficiency.slot;																		if(courseId == courseId2){																			if(proficiencyDirection == "Outgoing") {																				var proficiencyId = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_id;																				$.each(proficiencyNameToIdLevel,function(key,value){																						for(var i=0; i< value.length; i++){																							 var proficiencyId2 = value[i].id;																							 var proficiencyLevel = value[i].level;																							 if (proficiencyId == proficiencyId2) {																								 $("#" + key).addClass("outgoingproficiency");																								 $("#" + key).addClass("level"+ proficiencyLevel);																							 }																						 }																				});																			}else if(proficiencyDirection == "Incoming" && slot == 1) {																				var proficiencyId = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_id;																				$.each(proficiencyNameToIdLevel,function(key,value){																						for(var i=0; i< value.length; i++){																							 var proficiencyId2 = value[i].id;																							 var proficiencyLevel = value[i].level;																							 if (proficiencyId == proficiencyId2) {																								 $("#" + key + ">div >p").addClass("incomingproficiency");																								 $("#" + key + ">div >p").addClass("level"+ proficiencyLevel);																							 }																						 }																				});																			}																	}																	}																																		//description																	for(var courseCode in dataCourses){																		var courseId2 = dataCourses[courseCode].course.id;																		if(courseId == courseId2){																			var title = dataCourses[courseCode].course.title;																			var number = dataCourses[courseCode].course.number;																			var time = dataCourses[courseCode].course.prefix;																			var credit = dataCourses[courseCode].course.credit_hours;																			var totalSeats = dataCourses[courseCode].course.total_seats;																			var reservedSeats = dataCourses[courseCode].course.reserved_seats																			var description = dataCourses[courseCode].course.description;																				$("#rightDivInner ul  li  ul li").addClass("dpbackground");																				$(".title").append($("<span>"+title+"</span>").fadeIn(0));																				$(".credit").append($("<span>Credit: "+credit+"</span>").fadeIn(0));																				$(".totalSeats").append($("<span>Total Seats: "+totalSeats+"</span>").fadeIn(0));																				$(".reservedSeats").append($("<span>Reserved Seats:"+reservedSeats+"</span>").fadeIn(0));																				$(".description").append($("<span>"+description+"</span>").fadeIn(0));																		}																	}																}	  														   }														 },													 function(event) { //mouseover 													  var myId = event.currentTarget.id;													  for(var courseCode in data) {															var instance = data[courseCode].instance.id;															if(instance == myId) {																var courseId = data[courseCode].instance.course_id;																for(var courseCode in dataCoursesProficiencies){																	var courseId2 = dataCoursesProficiencies[courseCode].course_proficiency.course_id;																	var proficiencyDirection = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_direction;																	var slot = dataCoursesProficiencies[courseCode].course_proficiency.slot;																	if(courseId == courseId2){																		if(proficiencyDirection == "Outgoing") {																			var proficiencyId = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_id;																			$.each(proficiencyNameToIdLevel,function(key,value){																					for(var i=0; i< value.length; i++){																						 var proficiencyId2 = value[i].id;																						 var proficiencyLevel = value[i].level;																						 if (proficiencyId == proficiencyId2) {																							 $("#" + key).removeClass("outgoingproficiency");																							 $("#" + key).removeClass("level"+ proficiencyLevel);																						 }																					 }																			});																		}else if(proficiencyDirection == "Incoming" && slot == 1) {																			var proficiencyId = dataCoursesProficiencies[courseCode].course_proficiency.proficiency_id;																			$.each(proficiencyNameToIdLevel,function(key,value){																					for(var i=0; i< value.length; i++){																						 var proficiencyId2 = value[i].id;																						 var proficiencyLevel = value[i].level;																						 if (proficiencyId == proficiencyId2) {																							 $("#" + key + ">div >p").removeClass("incomingproficiency");																							 $("#" + key + ">div >p").removeClass("level"+ proficiencyLevel);																						 }																					 }																			});																		}																}																}																for(var courseCode in dataCourses){																	var courseId2 = dataCourses[courseCode].course.id;																	if(courseId == courseId2){																		var title = dataCourses[courseCode].course.title;																		var number = dataCourses[courseCode].course.number;																		var time = dataCourses[courseCode].course.prefix;																		var credit = dataCourses[courseCode].course.credit_hour;																		var totalSeats = dataCourses[courseCode].course.total_Seats																		var description = dataCourses[courseCode].course.description;																																				$("#rightDivInner ul  li  ul li").removeClass("dpbackground");																		$(".title").find("span").remove();																		$(".credit").find("span").remove();																		$(".totalSeats").find("span").remove();																		$(".reservedSeats").find("span").remove();																		$(".description").find("span").remove();																	}																}															}																  														}																	 }												  );																	  // assign the presemester's value as 0 for future calculation;												  var semesters = [];												  for(var i=0; i< myProficienciesIdSorted.length; i++){													 semesters  = semesters.concat(a);												  }												  												  instanceInfo=new Object();												  instanceInfo.semesterInfo=semesters;												  instanceInfo.proficiencyInfo=myProficienciesIdSorted;												  												  // click the squares to choose courses												  $(".square").click(function(event){														var myId = event.currentTarget.id;														var tempSemester = 0;														var iterSemester = 0;														var tempCourse = 0;														var tempInstance = 0;																			if ($('#'+myId).hasClass("cantakenCourse")) {															var indexOfId = $.inArray(myId,lockedInstances);															var outgoingProficienciesId = [];															var yellowClicked = [];															var greenClicked = [];															var blackClicked = [];															var currentSemesters = [];																														// look for the outgoing proficiencies															for(var courseCode in data) {																var instance = data[courseCode].instance.id;																																if(instance == myId) {																	var courseId = data[courseCode].instance.course_id;																	var semesterId = data[courseCode].instance.semester_id;																	tempSemester = semesterId;																	for(var courseCode2 in dataCoursesProficiencies){																		var courseId2 = dataCoursesProficiencies[courseCode2].course_proficiency.course_id;																		var proficiencyDirection = dataCoursesProficiencies[courseCode2].course_proficiency.proficiency_direction;																		if(courseId == courseId2 && proficiencyDirection == "Outgoing" ) {																			var profciencyId = dataCoursesProficiencies[courseCode2].course_proficiency.proficiency_id;																				outgoingProficienciesId = outgoingProficienciesId.concat(profciencyId);																			currentSemesters = currentSemesters.concat(semesterId);																		}																	}																																	}															}																														// add/delete courses															if(indexOfId == -1) { 																															var lockedCourses = [];																var lockedSemesters = [];																																//add courses																lockedInstances.push(myId);																$(event.currentTarget).addClass("pinnedCourse");																										//add current instance's semesters to instance object's semester array 																instanceInfo.semesterInfo = instanceInfo.semesterInfo.concat(currentSemesters);																					//add current instance's proficiencies to my proficiency list																instanceInfo.proficiencyInfo = instanceInfo.proficiencyInfo.concat(outgoingProficienciesId);																																//find the instance's lockedCourses and lockedSemesters 																for(var courseCode in lockedInstances){																	var myInstance = lockedInstances[courseCode];																												for(var courseCode in data){																		var instance = data[courseCode].instance.id;																		var course = data[courseCode].instance.course_id;																		var semester = data[courseCode].instance.semester_id;																			if(instance == myInstance){																			lockedCourses = lockedCourses.concat(course);																			lockedSemesters = lockedSemesters.concat(semester);																		}																	}																}																															// if the semester id of the new added instance is smaller than the existed one, delete the existed instance. 																for(var i=0; i<data.length; i++){																	var instanceId = data[i].instance.id;																																		if(instanceId == myId){																		var courseId = data[i].instance.course_id;																		var semesterId = data[i].instance.semester_id;																																				for(var j=0; j<lockedCourses.length; j++){																			var myCourse = lockedCourses[j];																																						if(myCourse == courseId){																					var mySemester = lockedSemesters[j];																																										if(semesterId < mySemester){																						   lockedInstances.splice(j, 1);																																									}																																							}																		}																	}																}																																													} else { 																// delete courses																lockedInstances.splice(indexOfId,1);																$(event.currentTarget).removeClass("pinnedCourse");																																// delete current semester and outgoing proficiencies in the instance object																for(var i = 0; i<instanceInfo.proficiencyInfo.length; i++){																	for (var j=0;  j<currentSemesters.length; j++) {																		for(var k=0; k<outgoingProficienciesId.length; k++){																			if(instanceInfo.proficiencyInfo[i] == outgoingProficienciesId[k] && instanceInfo.semesterInfo[i] == currentSemesters[j]){																				var deleteProfId3 = $.inArray(instanceInfo.proficiencyInfo[i], instanceInfo.proficiencyInfo);																				if (deleteProfId3 > -1 ) 																				instanceInfo.proficiencyInfo.splice(deleteProfId3, 1);																																								var deleteSemesterId3 = $.inArray(instanceInfo.semesterInfo[i], instanceInfo.semesterInfo);																				if (deleteSemesterId3 > -1)																				instanceInfo.semesterInfo.splice(deleteSemesterId3, 1);																			}																		}																	}																}																															}																														// update instanceInfo.proficiencyInfo and .semesterInfo:															instanceInfo.semesterInfo=semesters;															instanceInfo.proficiencyInfo=myProficienciesIdSorted;																														for(var courseCode in lockedInstances){																var myInstance = lockedInstances[courseCode];																											for(var courseCode in data){																	var instance = data[courseCode].instance.id;																	var course = data[courseCode].instance.course_id;																	var semester = data[courseCode].instance.semester_id;																		if(instance == myInstance){																		for (var profId in dataCoursesProficiencies) {																			var courseInProfs = dataCoursesProficiencies[profId].course_proficiency.course_id;																			var profDirec = dataCoursesProficiencies[profId].course_proficiency.proficiency_direction;																																						if (courseInProfs == course && profDirec == "Outgoing") {																				var profInProfs = dataCoursesProficiencies[profId].course_proficiency.proficiency_id;																				instanceInfo.proficiencyInfo = instanceInfo.proficiencyInfo.concat(profInProfs);																				instanceInfo.semesterInfo = instanceInfo.semesterInfo.concat(semester);																			}																		}																	}																}															}																															$.ajax({																url: "/add_path_instances.json?instanceId=" + myId,																type: "GET"															});																																for (iterSemester = 7; iterSemester <= 21; iterSemester += 2) {																for(var courseCode in data){																  var course = data[courseCode].instance.course_id;																  var semester = data[courseCode].instance.semester_id;																  var instance = data[courseCode].instance.id;																  var foundItOnce = false;																  var missingProfs = 0;																  var sameCourseRepeated;											  																  if (semester == iterSemester) {																	sameCourseRepeated = false;																	for (var i=0; i<lockedInstances.length; i++) {																	   var lockedInstance = lockedInstances[i];																	   for(var courseCode2 in data){																		   var myCourse = data[courseCode2].instance.course_id;																		   var mySemester = data[courseCode2].instance.semester_id;																		   var myInstance = data[courseCode2].instance.id;																		   																		   if(lockedInstance == myInstance){																			   if(course == myCourse && semester > mySemester){																					sameCourseRepeated = true;																					break;																			   }																		   }																		}																																			}																																		if (sameCourseRepeated) {																		missingProfs = 1;																		foundItOnce = false;																		 // goto blackClicked																	} else {																	 																  																	  for(var dataCourseProficiency in dataCoursesProficiencies){																			 var courseId = dataCoursesProficiencies[dataCourseProficiency].course_proficiency.course_id;																			 var slot = dataCoursesProficiencies[dataCourseProficiency].course_proficiency.slot;																			 if(courseId == course && slot == 1) {																				var proficiencyId = dataCoursesProficiencies[dataCourseProficiency].course_proficiency.proficiency_id;																				var foundIt = false;																																								for(var i=0; i<instanceInfo.proficiencyInfo.length; i++){																					if (proficiencyId == instanceInfo.proficiencyInfo[i] && semester > instanceInfo.semesterInfo[i] ) {																																		foundIt = true;																						foundItOnce = true;																					}																				}																																								if(!foundIt ) {																					missingProfs ++;																				}																			 }																		}																	  }																									  if(missingProfs >= 1){																			if(foundItOnce){																				yellowClicked = yellowClicked.concat(instance);																				}else{																				blackClicked = blackClicked.concat(instance);																			}																																						// remove this instance (not available now) from lockedInstances:																			for (var i = 0; i < lockedInstances.length; i++)																			  if (instance == lockedInstances[i])																			  lockedInstances.splice(i, 1);																	  }else{																			greenClicked = greenClicked.concat(instance);																	  }																	  																  }																}															}																														// update instanceInfo.proficiencyInfo and .semesterInfo:															instanceInfo.semesterInfo=semesters;															instanceInfo.proficiencyInfo=myProficienciesIdSorted;																														for(var courseCode in lockedInstances){																var myInstance = lockedInstances[courseCode];																											for(var courseCode in data){																	var instance = data[courseCode].instance.id;																	var course = data[courseCode].instance.course_id;																	var semester = data[courseCode].instance.semester_id;																		if(instance == myInstance){																		for (var profId in dataCoursesProficiencies) {																			var courseInProfs = dataCoursesProficiencies[profId].course_proficiency.course_id;																			var profDirec = dataCoursesProficiencies[profId].course_proficiency.proficiency_direction;																																						if (courseInProfs == course && profDirec == "Outgoing") {																				var profInProfs = dataCoursesProficiencies[profId].course_proficiency.proficiency_id;																				instanceInfo.proficiencyInfo = instanceInfo.proficiencyInfo.concat(profInProfs);																				instanceInfo.semesterInfo = instanceInfo.semesterInfo.concat(semester);																			}																		}																	}																}															}																														// add property to green, yellow and black instances															for(var courseCode in data){																var instance = data[courseCode].instance.id;																var courseId = data[courseCode].instance.course_id;																var semesterId = data[courseCode].instance.semester_id;																																for(var courseCode in greenClicked ){																	var greenClickedInstanceId = greenClicked[courseCode];																	if(instance == greenClickedInstanceId){																		if($("#"+ instance).hasClass("cantakenCourseNoBorder")){																			$("#"+ instance).addClass("cantakenCourse");																			if($("#"+ instance).parent("li").hasClass("noDisplay"))   																			$("#"+ instance).parent("li").removeClass("noDisplay");																																																		}else{																			$("#"+ instance).addClass("cantakenCourse");																			$("#"+ instance).addClass("cantakenCourseBorder");																			if($("#"+ instance).parent("li").hasClass("noDisplay"))   																			$("#"+ instance).parent("li").removeClass("noDisplay");																																}																	}																}																																// please see black and yellow instances the same here. I keep their difference for future use in case																// although the yellow ones are not displayed on the interface.																for(var courseCode in yellowClicked ){																	var yellowClickedInstanceId = yellowClicked[courseCode];																	if(instance == yellowClickedInstanceId){																			if($("#"+ instance).hasClass("cantakenCourse"))  																		   $("#"+ instance).removeClass("cantakenCourse");																		if($("#"+ instance).hasClass("cantakenCourseBorder"))																		   $("#"+ instance).removeClass("cantakenCourseBorder");																		if($("#"+ instance).parent("li").not(".noDisplay"))																		   $("#"+ instance).parent("li").addClass("noDisplay");																		if($("#" + instance).hasClass("pinnedCourse")){																		   $("#" + instance).removeClass("pinnedCourse"); 																		}																		}																		}																for(var courseCode in blackClicked ){																	var blackClickedInstanceId = blackClicked[courseCode];																	if(instance == blackClickedInstanceId){																		if($("#"+ instance).hasClass("cantakenCourse"))																		   $("#"+ instance).removeClass("cantakenCourse");																		if($("#"+ instance).hasClass("cantakenCourseBorder"))																		   $("#"+ instance).removeClass("cantakenCourseBorder");																		if($("#"+ instance).parent("li").not(".noDisplay"))																		   $("#"+ instance).parent("li").addClass("noDisplay");																		if($("#" + instance).hasClass("pinnedCourse")){																		   $("#" + instance).removeClass("pinnedCourse"); 																		}																		}																}																}																																 }										 														return false;												  });												  												  // finish calcuation														  										  });									  						      });						      						      						      						    });						});					});				});			 			});					});	});	});  